<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ARForest Deep Inside 个人主观听后简评</title>
    <link href="/2023/01/14/Deep-Inside-Comment/"/>
    <url>/2023/01/14/Deep-Inside-Comment/</url>
    
    <content type="html"><![CDATA[<h1 id="ARForest-Deep-Inside-个人主观听后简评"><a href="#ARForest-Deep-Inside-个人主观听后简评" class="headerlink" title="ARForest Deep Inside 个人主观听后简评"></a>ARForest Deep Inside 个人主观听后简评</h1><blockquote><p>注意，这只是我个人主观对专辑内每首曲子的感受，如果你听完后有不同的感受一切以你为准。</p></blockquote><h2 id="Track-01-Hollow"><a href="#Track-01-Hollow" class="headerlink" title="Track 01. Hollow"></a>Track 01. Hollow</h2><p>很中规中矩的服务于专辑主题的一首 Intro。底噪引入，arf 经典的弦乐高潮段 glitch 淡出衔接下一曲。</p><h2 id="Track-02-Deep-Inside-feat-nayuta"><a href="#Track-02-Deep-Inside-feat-nayuta" class="headerlink" title="Track 02. Deep Inside (feat. nayuta)"></a>Track 02. Deep Inside (feat. nayuta)</h2><p>专辑同名曲。intro 段很清新灵动，奶油糖唱这种类型的曲子还是不怎么容易翻车的。和 Imaginary Arcadia 不一样的一点大概是用到了一些民族乐器。钢琴 solo 十分 arf。不过感觉这俩合作好像都是这种风格的曲子。</p><h2 id="Track-03-Vagabond"><a href="#Track-03-Vagabond" class="headerlink" title="Track 03. Vagabond"></a>Track 03. Vagabond</h2><p>冷饭，全曲突出一个 arf 什锦锅，但我喜欢。</p><h2 id="Track-04-ARForest-amp-KARUT-Wanderer-of-Labyrinth"><a href="#Track-04-ARForest-amp-KARUT-Wanderer-of-Labyrinth" class="headerlink" title="Track 04. ARForest &amp; KARUT - Wanderer of Labyrinth"></a>Track 04. ARForest &amp; KARUT - Wanderer of Labyrinth</h2><p>Trance + acid + colorbass。可能由于常年听 Taishi 被惯坏了，所以我对 trance 的要求还蛮高的。而且我个人来说不怎么喜欢听 acid 的音色，不过后面的 colorbass 段很惊艳，就拿这首的质量来说可以认为 arf 的转型是成功的。硬要我说我觉得这首哪里不好，可能是只有 5分钟对于这么丰富的 trance 来说还是太短了吧。</p><h2 id="Track-05-Awe"><a href="#Track-05-Awe" class="headerlink" title="Track 05. Awe"></a>Track 05. Awe</h2><p>中规中矩的一首融合了 arf 风格的不那么 happy 也不那么 hardcore的 HappyHardcore。比较适合拿来安利路人入坑 hdm（。</p><h2 id="Track-06-ARForest-amp-Sta-Light-of-Love"><a href="#Track-06-ARForest-amp-Sta-Light-of-Love" class="headerlink" title="Track 06. ARForest &amp; Sta - Light of Love"></a>Track 06. ARForest &amp; Sta - Light of Love</h2><p>神中神😭😭😭😭😭。</p><h2 id="Track-07-Deeper-and-Deeper"><a href="#Track-07-Deeper-and-Deeper" class="headerlink" title="Track 07. Deeper and Deeper"></a>Track 07. Deeper and Deeper</h2><p>铺垫比较长的 Melodic Dubstep？或者可以泛称为 Midtempo 吧，确实很符合曲名 Deeper and Deeper 的感觉。</p><h2 id="Track-08-ARForest-amp-Sobrem-Erlking"><a href="#Track-08-ARForest-amp-Sobrem-Erlking" class="headerlink" title="Track 08. ARForest &amp; Sobrem - Erlking"></a>Track 08. ARForest &amp; Sobrem - Erlking</h2><p>当初看到 Sobrem 我还以为会是爵，钢琴听着听着突然就一转 Neurofunk，很新很爽，多来点。</p><h2 id="Track-09-Lamentation-in-Cytus-II"><a href="#Track-09-Lamentation-in-Cytus-II" class="headerlink" title="Track 09. Lamentation (in Cytus II)"></a>Track 09. Lamentation (in Cytus II)</h2><p>冷饭，不过我不玩雷亚音游，所以这首曲子对我来说不算冷饭（。神中神，盲听根本听不出来这是 arf 写的曲子，旋律和氛围和曲名一致，有种魂like 游戏 boss 登场曲的压迫感。节奏型很难抓，很符合音游玩家对难度的追求。曲风的话算是 kick 比较重旋律比较黑暗的 Artcore/UKHardcore 吧大概（。</p><h2 id="Track-10-Glimmering-in-EZ2ON-REBOOT-R"><a href="#Track-10-Glimmering-in-EZ2ON-REBOOT-R" class="headerlink" title="Track 10. Glimmering (in EZ2ON REBOOT : R)"></a>Track 10. Glimmering (in EZ2ON REBOOT : R)</h2><p>冷饭，一听就能听出来一股浓浓的 arf 味 artcore。drop 梦回 Frost Era。泪，冲了出来。</p><h2 id="Track-11-Underground"><a href="#Track-11-Underground" class="headerlink" title="Track 11. Underground"></a>Track 11. Underground</h2><p>ARForest-flavor’s artcore again。不得不说，arf 的弦乐段和钢琴 solo 段总是能让人感到温暖。这首的第一段 kick 给的力道很足，第二段则回到 arf 常规的 kick，就我个人而言我是蛮期待 arf 写出一首 mainstream hardcore 的，就最近 arf 用的 kick 来说其实我感觉也是迟早的事（。</p><h2 id="Track-12-星になって-feat-Sennzai"><a href="#Track-12-星になって-feat-Sennzai" class="headerlink" title="Track 12. 星になって (feat.Sennzai)"></a>Track 12. 星になって (feat.Sennzai)</h2><p>如果 Imaginary Arcadia 是 Arforest &amp; Sennzai 大概听起来就是这样的吧（。arf 温柔的音色配上 sennzai 温柔的声线，各种意义上的有点像Imaginary Arcadia 的倒数第二曲 Sympatheia，巧了，这首也是（除 remix 和 instrument 外的）倒数第二曲。</p><h2 id="Track-13-Floating"><a href="#Track-13-Floating" class="headerlink" title="Track 13. Floating"></a>Track 13. Floating</h2><p>我飘起来了（。一首 Ambient 作为全专的 Outro，中规中矩。结尾有点 Outer Wilds 的感觉（</p>]]></content>
    
    
    
    <tags>
      
      <tag>同人音乐</tag>
      
      <tag>ARForest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序设计课题——万年历的实现与思考</title>
    <link href="/2022/11/18/perpetual_calendar/"/>
    <url>/2022/11/18/perpetual_calendar/</url>
    
    <content type="html"><![CDATA[<h1 id="程序设计课题——万年历的实现与思考"><a href="#程序设计课题——万年历的实现与思考" class="headerlink" title="程序设计课题——万年历的实现与思考"></a>程序设计课题——万年历的实现与思考</h1><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul><li>要将某一年的日历打印出来，首先需要知道该年第一天是周几。</li><li>要计算 <code>任意年任意月任意日</code> 是周几，我们不难想到可以使用迭代法从 <code>1年 1月 1日</code> 不断迭代累加至 <code>所求年所求月所求日</code> 算出两者间隔的总天数再对 7 取余。</li><li>那么问题来了，公元 <code>1年 1月 1日</code> 是周几？是周一吗？</li></ul><blockquote><p>格勒哥里十三世废除了<a href="https://zh.wikipedia.org/wiki/%E5%84%92%E7%95%A5%E6%9B%86" title="儒略历">儒略历</a>。并颁布了新历法，即<a href="https://zh.wikipedia.org/wiki/%E9%A2%9D%E6%88%91%E7%95%A5%E5%8E%86" title="格里高利历">格里高利历</a>，又译为<a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E9%87%8C%E6%9B%86" title="格里历">格里历</a>。教廷规定1582年10月4日星期四之后的第二天是1582年10月15日星期五，即跳过10天。由于是格勒哥里十三世颁布，新历法被称为<a href="https://zh.wikipedia.org/wiki/%E9%A2%9D%E6%88%91%E7%95%A5%E5%8E%86" title="格里高利历">格里高利历</a>。</p><p>——<strong>维基百科</strong></p></blockquote><ul><li>所以按照格里高利历施行后的历法向前推算，<code>1年 1月 1日</code> 应为周六而非周一。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>于是我们就可以愉快地用迭代法。。。等等！如果我们使用迭代法去累加天数，那显而易见的，算法的时间复杂度为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 其中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 为所求的年分，这样的时间复杂度在计算较大年分（如 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></g></svg></mjx-container> 这个数量级）时，效率会很低。那么有没有什么办法，能够在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 的时间复杂度下得知 <code>任意年任意月任意日</code> 与 <code>1年 1月 1日</code> 间隔的总天数？当然是有的。</p><p>根据格里高利历的规则：</p><blockquote><p>每一个可以被4整除的年份都是闰年，但可以被100整除的年份，必须也能被400整除才是闰年。因此，1700年、1800年、和1900年都不是闰年，而2000年是闰年。</p><p>——<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E6%B5%B7%E5%86%9B%E5%A4%A9%E6%96%87%E5%8F%B0" title="美国海军天文台">美国海军天文台</a></p></blockquote><p>不难发现，其实每年的天数无非就是 356天 和 366天二选一的问题。所以我们可以将所有年份都暂定为 365天对于是闰年的，只需要让天数自增1即可。但这样我们必然绕不开各种 <code>if-else</code> 满天飞的代码，那么有没有什么方法将 <code>if-else</code> 简化为一行代码呢？当然也是有的：</p><script type="math/tex; mode=display">w = 365 \times y + \left\lfloor\cfrac{y}{4}\right\rfloor - \left\lfloor\cfrac{y}{100}\right\rfloor + \left\lfloor\cfrac{y}{400}\right\rfloor</script><p>其中：</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 888 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></g></svg></mjx-container> 代表向下取整。</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 代表 1年 至 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 年间隔的年份（不包含 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 年本身），即此处的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 应为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.623ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2485.4 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(985.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1985.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 763 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g></g></g></svg></mjx-container> 代表所求年份。</li></ul><p>用 C 表述无非就是 <code>int w = 365 * y + y / 4 - y / 100 + y / 400;</code></p><p>但是为了计算 <code>任意年任意月任意日</code> 与 <code>1年 1月 1日</code> 间隔的总天数，我们还需要再加上该年 1月 1日 至 所求月所求日之间的天数，这里我们只需要造两个数组模拟两个 map 分别存储闰年每月的天数和平年每月的天数即可，实现代码（C++）如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; months{<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>};<br>vector&lt;<span class="hljs-type">int</span>&gt; months_leap{<span class="hljs-number">31</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>};<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">compute_date</span><span class="hljs-params">(<span class="hljs-type">int</span> y, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> d)</span> </span>{<br>    <span class="hljs-type">int</span> yd = <span class="hljs-number">365</span> * (y - <span class="hljs-number">1</span>) + (y - <span class="hljs-number">1</span>) / <span class="hljs-number">4</span> - (y - <span class="hljs-number">1</span>) / <span class="hljs-number">100</span> + (y - <span class="hljs-number">1</span>) / <span class="hljs-number">400</span>;<br>    <span class="hljs-type">int</span> md = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// if isLeap:</span><br>    <span class="hljs-keyword">if</span> ((y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; y % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || y % <span class="hljs-number">400</span> == <span class="hljs-number">0</span> &amp;&amp; y)<br>        md = <span class="hljs-built_in">accumulate</span>(months_leap.<span class="hljs-built_in">begin</span>(), months_leap.<span class="hljs-built_in">begin</span>() + m - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">else</span><br>        md = <span class="hljs-built_in">accumulate</span>(months.<span class="hljs-built_in">begin</span>(), months.<span class="hljs-built_in">begin</span>() + m - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> (yd + md + d) % <span class="hljs-number">7</span>;<br>}<br></code></pre></td></tr></table></figure><p>但是这还不够精妙，有没有不需要造数组模拟 map 也能实现上述功能的方法？这就不得不提到我们的重头戏，蔡勒公式了。</p><blockquote><p>蔡勒公式（德语：Zellers Kongruenz），是一种计算任何一日属一星期中哪一日的演算法，由德国数学家克里斯提安·蔡勒推算出来。</p></blockquote><script type="math/tex; mode=display">w = (y + \left\lfloor\cfrac{y}{4}\right\rfloor+\left\lfloor\cfrac{c}{4}\right\rfloor-2c+\left\lfloor\cfrac{26(m+1)}{10}\right\rfloor+d-1)\text{ mod }7</script><p>公式中的符号含义如下：</p><ul><li>w：星期（计算所得的数值对应的星期：0-星期日；1-星期一；2-星期二；3-星期三；4-星期四；5-星期五；6-星期六）</li><li>c：年份前两位数</li><li>y：年份后两位数</li><li>m：月（m的取值范围为3至14，即在蔡勒公式中，某年的1、2月要看作上一年的13、14月来计算，比如2003年1月1日要看作2002年的13月1日来计算）</li><li>d：日</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 888 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></g></svg></mjx-container>：向下取整。</li></ul><p>但由于 C 系语言获取整数前几位数或后几位数较为繁琐，所以将公式变化后如下：</p><script type="math/tex; mode=display">w = (365\times y+\left\lfloor\cfrac{y}{4}\right\rfloor-\left\lfloor\cfrac{y}{100}\right\rfloor+\left\lfloor\cfrac{y}{400}\right\rfloor+\left\lfloor\cfrac{153\times m-457}{5}\right\rfloor+d-306)\text{ mod }7</script><p>粗看似乎很难理解公式中各个参数和常量分别代表什么含义，所以我们先将公式分为几个部分：</p><script type="math/tex; mode=display">\begin{aligned}    w&=(365\times y+\left\lfloor\cfrac{y}{4}\right\rfloor-\left\lfloor\cfrac{y}{100}\right\rfloor+\left\lfloor\cfrac{y}{400}\right\rfloor+\left\lfloor\cfrac{153\times m-457}{5}\right\rfloor+d-306)\text{ mod }7\\     &=(w_1+w_3+d-w_2)\text{ mod }7\end{aligned}</script><ul><li>首先我们来看 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.608ex" height="1.342ex" role="img" focusable="false" viewBox="0 -443 1152.6 593"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>。需要注意的是，公式前半部分 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.608ex" height="1.342ex" role="img" focusable="false" viewBox="0 -443 1152.6 593"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 中的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 与朴素算法公式中的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 代表的含义是不一样的，朴素算法中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 实际上是不包含所求年的，而蔡勒公式前半部分 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.608ex" height="1.342ex" role="img" focusable="false" viewBox="0 -443 1152.6 593"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container> 中的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 是包含所求年的。</li></ul><script type="math/tex; mode=display">w_1 = 365\times y+\left\lfloor\cfrac{y}{4}\right\rfloor-\left\lfloor\cfrac{y}{100}\right\rfloor+\left\lfloor\cfrac{y}{400}\right\rfloor</script><ul><li>蔡勒公式的后半段 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.608ex" height="1.342ex" role="img" focusable="false" viewBox="0 -443 1152.6 593"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container> 中计算日期的方法实际上是巧妙地绕开了 2月的，因为平年和闰年唯一的区别就是平年 2月只有 28天，而闰年 二月有 29天，如果只计算3 月到 12月，那么无论如何天数都恒为 306天。因此，蔡勒公式的后半段中的常量 306代表的是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 年 3月 1日到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 年 12月 31日之间经过的时间：</li></ul><script type="math/tex; mode=display">w_2=M_3+M_4+\cdots+M_1=31+30+\cdots+31=306</script><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.342ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1477.3 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(1003,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 代表第 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 月的天数。</p><p>但如果我们需要知道的是 1月或 2月的某一天是周几该怎么办？蔡勒公式的解决方案是不计算至 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 年 12月 31日，而是计算少一年，即计算 <code>1.01.01 —— (y-1).12.31</code> 的天数后，再加上 12个月的总天数，这样一来，1月就变为了 13月，2月就变成了 14月，接着为了更加直观地理解公式是如何推出来的，我们列如下表格。该表格列出了 3月 1日到各个月份的首日之间间隔的天数。</p><div class="table-container"><table><thead><tr><th>月分</th><th>该月天数</th><th>该月首日与 03.01 间隔的天数</th></tr></thead><tbody><tr><td>03</td><td>31</td><td>0</td></tr><tr><td>04</td><td>30</td><td>31</td></tr><tr><td>05</td><td>31</td><td>61</td></tr><tr><td>06</td><td>30</td><td>92</td></tr><tr><td>07</td><td>31</td><td>122</td></tr><tr><td>08</td><td>31</td><td>153</td></tr><tr><td>09</td><td>30</td><td>184</td></tr><tr><td>10</td><td>31</td><td>214</td></tr><tr><td>11</td><td>30</td><td>245</td></tr><tr><td>12</td><td>31</td><td>275</td></tr><tr><td>13</td><td>31</td><td>306</td></tr><tr><td>14</td><td>XX</td><td>337</td></tr></tbody></table></div><p>列出表格后，我们不难发现，忽略掉个位数的变化，每月首日与 03.01 间隔的差值是一个公差为 30的等差数列，而个位数的变化为 <code>1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7.</code> 我们可以用如下公式去拟合个位数的变化：</p><script type="math/tex; mode=display">\left\lfloor\cfrac{m\times 3-7}{5}\right\rfloor</script><p>至于为什么该公式恰好可以拟合个位数变化，是如何推导出来的，碍于篇幅和本人极差的数学功底，在此就不做展开了，但从中不难看出蔡勒公式之巧妙。</p><p>接下来只需要将公差和个位数变化代入等差数列通项公式，即可得到蔡勒公式变化式中间部分的公式 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.608ex" height="1.377ex" role="img" focusable="false" viewBox="0 -443 1152.6 608.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container> 了：</p><script type="math/tex; mode=display">\begin{aligned}    w_3&=30\times(m-3)+\left\lfloor\cfrac{m\times3-7}{5}\right\rfloor\\       &=\left\lfloor\cfrac{153×m-457}{5}\right\rfloor\end{aligned}</script><p>然后只需要在公式的最后加上日期 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.176ex" height="1.593ex" role="img" focusable="false" viewBox="0 -694 520 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container> 再对 7取余，就得到了最终的蔡勒公式：</p><script type="math/tex; mode=display">\begin{aligned}    w&=w_1+w_3+d-w_2\\     &=(365\times y+\left\lfloor\cfrac{y}{4}\right\rfloor-\left\lfloor\cfrac{y}{100}\right\rfloor+\left\lfloor\cfrac{y}{400}\right\rfloor+\left\lfloor\cfrac{153\times m-457}{5}\right\rfloor+d-306)\text{ mod }7\end{aligned}</script><p>至此，我们便不需要 24个参数也可以得知 <code>任意年任意月任意日</code> 是周几了，实现代码（C++）如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">compute_date</span><span class="hljs-params">(<span class="hljs-type">int</span> y, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> d)</span> </span>{<br>    <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">3</span>) --y, m += <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">365</span> * y + y / <span class="hljs-number">4</span> - y / <span class="hljs-number">100</span> + y / <span class="hljs-number">400</span> + (<span class="hljs-number">153</span> * m - <span class="hljs-number">457</span>) / <span class="hljs-number">5</span> + d - <span class="hljs-number">306</span>) % <span class="hljs-number">7</span>;<br>}<br></code></pre></td></tr></table></figure><h2 id="提高要求"><a href="#提高要求" class="headerlink" title="提高要求"></a>提高要求</h2><p>蔡勒公式很好，但有一个问题，不论是蔡勒公式原式还是上文提到的变换后蔡勒公式，都是不适用于计算格里高利历采用之前（<code>1582.10.15</code> 前）的日期计算的，其实很好解决，只需要对于 <code>1582.10.15</code> 前的日期用朴素做法计算，<code>1582.10.15</code> 之后的日期采用蔡勒公式即可（因为时间复杂度都是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> ）。</p><p>但是需要注意的一点是，格里高利历采用前，是<strong>不存在</strong>“能被100整除且不能被400整除的年份是闰年”这种规定的。</p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 造俩数组当 map 使</span><br>vector&lt;<span class="hljs-type">int</span>&gt; months{<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>};<br>vector&lt;<span class="hljs-type">int</span>&gt; months_leap{<span class="hljs-number">31</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>};<br><br><span class="hljs-comment">// 24个参数实现 O(1) 复杂度用于计算 1582年 10月 15日前的年份</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">compute_old_date</span><span class="hljs-params">(<span class="hljs-type">int</span> y, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> d)</span> </span>{<br>    <span class="hljs-comment">// 这里需要注意一点，由于 1582 年格里高利历实行前是不存在“能被100整除且不能被400整除的年份是闰年”这种规定的</span><br>    <span class="hljs-type">int</span> yd = <span class="hljs-number">365</span> * (y - <span class="hljs-number">1</span>) + (y - <span class="hljs-number">1</span>) / <span class="hljs-number">4</span> + <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 这里需要注意一点，由于 1582 年格里高利历实行前是不存在“能被100整除且不能被400整除的年份是闰年”这种规定的</span><br>    <span class="hljs-comment">// if isLeap:</span><br>    <span class="hljs-keyword">if</span> (y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> (yd + <span class="hljs-built_in">accumulate</span>(months_leap.<span class="hljs-built_in">begin</span>(), months_leap.<span class="hljs-built_in">begin</span>() + m - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) + d) % <span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">return</span> (yd + <span class="hljs-built_in">accumulate</span>(months.<span class="hljs-built_in">begin</span>(), months.<span class="hljs-built_in">begin</span>() + m - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) + d) % <span class="hljs-number">7</span>;<br>}<br><br><span class="hljs-comment">// 蔡勒公式改编实现 O(1) 时间复杂度</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">compute_date</span><span class="hljs-params">(<span class="hljs-type">int</span> y, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> d)</span> </span>{<br>    <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">3</span>) --y, m += <span class="hljs-number">12</span>;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">365</span> * y + y / <span class="hljs-number">4</span> - y / <span class="hljs-number">100</span> + y / <span class="hljs-number">400</span> + (<span class="hljs-number">153</span> * m - <span class="hljs-number">457</span>) / <span class="hljs-number">5</span> + d - <span class="hljs-number">306</span>) % <span class="hljs-number">7</span>;<br>}<br><br><span class="hljs-comment">// calendar 数组生成函数</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">generate_calendar</span>(<span class="hljs-type">int</span> y) {<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">365</span>;<br>    <span class="hljs-comment">// 做浅拷贝足矣，但反正也只用一行，深拷贝就深拷贝吧</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; date = months;<br>    <span class="hljs-comment">// if isLeap:</span><br>    <span class="hljs-comment">// 这里需要注意一点，由于 1582 年格里高利历实行前是不存在“能被100整除且不能被400整除的年份是闰年”这种规定的</span><br>    <span class="hljs-keyword">if</span> (((y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; y % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || y % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) || (y &lt; <span class="hljs-number">1582</span> &amp;&amp; y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>))<br>        ++n, date = months_leap;<br><br>    <span class="hljs-comment">// 初始化 calendar 数组</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">calendar</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">3</span>));<br>    <span class="hljs-comment">// 生成 calendar 数组</span><br>    <span class="hljs-type">int</span> m = <span class="hljs-number">1</span>, d = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) {<br>        <span class="hljs-comment">// 1582年前用 compute_old_date</span><br>        <span class="hljs-keyword">if</span> (y &lt; <span class="hljs-number">1582</span>)<br>            calendar[i][<span class="hljs-number">0</span>] = m, calendar[i][<span class="hljs-number">1</span>] = d, calendar[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">compute_old_date</span>(y, m, d);<br>        <span class="hljs-comment">// 1582年后用蔡勒公式</span><br>        <span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">1582</span>)<br>            calendar[i][<span class="hljs-number">0</span>] = m, calendar[i][<span class="hljs-number">1</span>] = d, calendar[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">compute_date</span>(y, m, d);<br>        <span class="hljs-comment">// 1582年比较特殊，写个特判</span><br>        <span class="hljs-keyword">if</span> (y == <span class="hljs-number">1582</span>) {<br>            <span class="hljs-keyword">if</span> (m &lt; <span class="hljs-number">10</span>) calendar[i][<span class="hljs-number">0</span>] = m, calendar[i][<span class="hljs-number">1</span>] = d, calendar[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">compute_old_date</span>(y, m, d);<br>            <span class="hljs-keyword">if</span> (m == <span class="hljs-number">10</span>) {<br>                <span class="hljs-keyword">if</span> (d &lt; <span class="hljs-number">15</span>) calendar[i][<span class="hljs-number">0</span>] = m, calendar[i][<span class="hljs-number">1</span>] = d, calendar[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">compute_old_date</span>(y, m, d);<br>                <span class="hljs-keyword">else</span> calendar[i][<span class="hljs-number">0</span>] = m, calendar[i][<span class="hljs-number">1</span>] = d, calendar[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">compute_date</span>(y, m, d);<br>            }<br>            <span class="hljs-keyword">if</span> (m &gt; <span class="hljs-number">10</span>) calendar[i][<span class="hljs-number">0</span>] = m, calendar[i][<span class="hljs-number">1</span>] = d, calendar[i][<span class="hljs-number">2</span>] = <span class="hljs-built_in">compute_date</span>(y, m, d);<br>        }<br>        <span class="hljs-keyword">if</span> (++d &gt; date[m - <span class="hljs-number">1</span>]) ++m, d = <span class="hljs-number">1</span>;<br>    }<br>    <span class="hljs-keyword">return</span> calendar;<br>}<br><br><span class="hljs-comment">// 打印日历函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_calendar</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; calendar, <span class="hljs-type">int</span> y)</span> </span>{<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">365</span>;<br>    <span class="hljs-keyword">if</span> ((y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; y % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || y % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) ++n;<br><br>    <span class="hljs-type">int</span> d = <span class="hljs-number">0</span>, m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; calendar.<span class="hljs-built_in">size</span>(); ++i) {<br>        <span class="hljs-comment">// 打印月及日历抬头指示</span><br>        <span class="hljs-keyword">if</span> (m != calendar[i][<span class="hljs-number">0</span>]) {<br>            d = <span class="hljs-number">0</span>, ++m;<br>            cout &lt;&lt; <span class="hljs-string">"\n\n\n"</span> &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">11</span>) &lt;&lt; calendar[i][<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">"月"</span> &lt;&lt; endl<br>                             &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-string">"Su"</span><br>                             &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-string">"Mo"</span><br>                             &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-string">"Tu"</span><br>                             &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-string">"We"</span><br>                             &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-string">"Th"</span><br>                             &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-string">"Fr"</span><br>                             &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-string">"Sa"</span> &lt;&lt; endl;<br>        }<br>        <span class="hljs-comment">// 补齐空格</span><br>        <span class="hljs-keyword">while</span> (d != calendar[i][<span class="hljs-number">2</span>]) {<br>            cout &lt;&lt; <span class="hljs-string">"   "</span>;<br>            ++d;<br>        }<br>        <span class="hljs-comment">// 打印日</span><br>        <span class="hljs-keyword">if</span> (y == <span class="hljs-number">1582</span> &amp;&amp; m == <span class="hljs-number">10</span> &amp;&amp; calendar[i][<span class="hljs-number">1</span>] == <span class="hljs-number">5</span>) i += <span class="hljs-number">10</span>;<br>        cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>) &lt;&lt; calendar[i][<span class="hljs-number">1</span>];<br>        ++d;<br>        <span class="hljs-comment">// 每七天换行</span><br>        <span class="hljs-keyword">if</span> (d &gt; <span class="hljs-number">6</span>) {<br>            cout &lt;&lt; <span class="hljs-string">"\n"</span>;<br>            d = <span class="hljs-number">0</span>;<br>        }<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-comment">// 取消同步以提高读速</span><br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<br>        <span class="hljs-type">int</span> year = <span class="hljs-number">1</span>;<br>        cout &lt;&lt; <span class="hljs-string">"\n请输入年份（Ctrl-C 退出）："</span>;<br>        cin &gt;&gt; year;<br>        <span class="hljs-keyword">if</span> (year &lt; <span class="hljs-number">1</span>) {<br>            cerr &lt;&lt; <span class="hljs-string">"输入非法！\n"</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        }<br>        <span class="hljs-built_in">print_calendar</span>(<span class="hljs-built_in">generate_calendar</span>(year), year);<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></table></figure><h2 id="有待改善"><a href="#有待改善" class="headerlink" title="有待改善"></a>有待改善</h2><p>然而实际上，蔡勒公式是有可以计算儒略历日期的推导式的，不过碍于篇幅和笔者过载的大脑，此处就暂且按下不表。不过高情商地说，这也算是抛砖引玉，诸位读者如果感兴趣可以自行网络冲浪找寻答案来狠狠地薄纱本蒟蒻丑陋不堪的代码。</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>你知道吗，目前似乎只有华为 EMUI 和 iOS 的自带日历是准确删去了 <code>1582.10.05——1582.10.14</code> 这段时间并且 <code>1.01.01</code> 准确显示为周六的，但是iPadOS点进 <code>1582.10</code> 则会崩溃。</p><p><img src="./1582EMUI.jpg" alt="" title="EMUI 日历App 1582年 10月"><br><img src="./1EMUI.jpg" alt="" title="EMUI 日历App 1年 1月"><br><img src="./1iPadOS.PNG" alt=""></p><p>另外 UNIX 系统有一条指令 <code>cal</code> 可以直接打印日历，但是其根据的是大英帝国及其殖民地（包含今天的美国）在 1752 采用格里高利历，所以实际上UNIX <code>cal</code> 指令打印的日历中被削除的日期是 <code>1752.09.03——1752.09.13</code>。</p><p><img src="./Alpine.PNG" alt="" title="Alpine"><br><img src="./Ubuntu.png" alt="" title="Ubuntu"></p>]]></content>
    
    
    
    <tags>
      
      <tag>文章</tag>
      
      <tag>算法</tag>
      
      <tag>万年历</tag>
      
      <tag>蔡勒公式</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTeX 测试</title>
    <link href="/2022/11/06/Latex-test/"/>
    <url>/2022/11/06/Latex-test/</url>
    
    <content type="html"><![CDATA[<hr><p>  <strong>BP算法</strong></p><p>  训练集    <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="108.597ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 48000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="merror" data-mjx-error="Missing or unrecognized delimiter for \left" title="Missing or unrecognized delimiter for \left"><rect data-background="true" width="48000" height="950" y="-200"></rect><title>Missing or unrecognized delimiter for \left</title><g data-mml-node="mtext" style="font-family: serif;"><text data-variant="-explicitFont" transform="scale(1,-1)" font-size="884px">\left{\left(x^{(1)}, y^{(1)}\right), \ldots,\left(x^{(m)}, y^{(m)}\right)\right}</text></g></g></g></g></svg></mjx-container></p><p>  设    <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.991ex;" xmlns="http://www.w3.org/2000/svg" width="20.898ex" height="3.391ex" role="img" focusable="false" viewBox="0 -1060.7 9236.7 1498.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g><g data-mml-node="TeXAtom" transform="translate(866,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(687,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(866,-293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1954.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3010.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3510.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mtext" transform="translate(3899.4,0)"><path data-c="A0" d=""></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(250,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(556,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1056,0)"></path><path data-c="20" d="" transform="translate(1448,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1698,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2198,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2476,0)"></path><path data-c="A0" d="" transform="translate(2754,0)"></path></g><g data-mml-node="mi" transform="translate(6903.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(7201.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7646.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7991.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8435.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(8847.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.119ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6240.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="46" d="M128 619Q121 626 117 628T101 631T58 634H25V680H582V676Q584 670 596 560T610 444V440H570V444Q563 493 561 501Q555 538 543 563T516 601T477 622T431 631T374 633H334H286Q252 633 244 631T233 621Q232 619 232 490V363H284Q287 363 303 363T327 364T349 367T372 373T389 385Q407 403 410 459V480H450V200H410V221Q407 276 389 296Q381 303 371 307T348 313T327 316T303 317T284 317H232V189L233 61Q240 54 245 52T270 48T333 46H360V0H348Q324 3 182 3Q51 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(653,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(1153,0)"></path><path data-c="A0" d="" transform="translate(1545,0)"></path></g><g data-mml-node="mi" transform="translate(1795,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2417.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3473.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(3973.6,0)"><path data-c="A0" d=""></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(250,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(639,0)"></path><path data-c="A0" d="" transform="translate(1139,0)"></path></g><g data-mml-node="mi" transform="translate(5362.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></g></svg></mjx-container></p><script type="math/tex; mode=display">  \begin{array}{l}{\text { Set } a^{(1)}=x^{(i)}} \\ {\text { Perform forward propagation to compute } a^{(l)} \text { for } l=2,3, \ldots, L} \\ {\text { Using } y^{(i)}, \text { compute } \delta^{(L)}=a^{(L)}-y^{(i)}} \\ {\text { Compute } \delta^{(L-1)}, \delta^{(l+1)}, \ldots, \delta^{(2)}} \\ {\Delta_{i j}^{(l)} :=\Delta_{i j}^{(l)}+a_{j}^{(l)} \delta_{i}^{(l+1)}}\end{array}</script><p>  $\begin{array}{l}{D<em>{i j}^{(l)} :=\frac{1}{m} \Delta</em>{i j}^{(l)}+\lambda \Theta<em>{i j}^{(l)}} &amp; {\text { if } j \neq 0} \ {D</em>{i j}^{(l)} :=\frac{1}{m} \Delta_{i j}^{(l)}} &amp; {\text { if } j=0}\end{array}$</p><p>  其中    $\frac{\partial}{\partial \Theta<em>{i j}^{(l)}} J(\Theta)=D</em>{i j}^{(l)}$</p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微雪 UPS_HAT 显示电量脚本 和 Fan_HAT 无法同时运行的问题</title>
    <link href="/2022/10/24/Waveshare_UPS_HAT_&amp;_Fan_HAT_issue/"/>
    <url>/2022/10/24/Waveshare_UPS_HAT_&amp;_Fan_HAT_issue/</url>
    
    <content type="html"><![CDATA[<h1 id="微雪-UPS-HAT-显示电量脚本-和-Fan-HAT-无法同时运行的问题"><a href="#微雪-UPS-HAT-显示电量脚本-和-Fan-HAT-无法同时运行的问题" class="headerlink" title="微雪 UPS_HAT 显示电量脚本 和 Fan_HAT 无法同时运行的问题"></a>微雪 UPS_HAT 显示电量脚本 和 Fan_HAT 无法同时运行的问题</h1><p>事情是这样的，在我兴高采烈地把微雪的 <a href="https://www.waveshare.net/wiki/UPS_HAT">UPS_HAT</a> 装到我的树莓派4b上的时候，UPS_HAT 能够正常为树莓派供电，但执行 <a href="https://www.waveshare.net/w/upload/d/d9/UPS_HAT.7z">微雪官网给出的 Python 程序</a> 后 Python 报错。</p><span id="more"></span><p><img src="./1.png" alt=""></p><p>最后经过和微雪售后的一番 debug，发现了是由于我安装的 <a href="https://www.waveshare.net/wiki/Fan_HAT">微雪 Fan_HAT</a> 使用的官方提供的 C 程序调用 bcm 库时出现了问题。解决办法也很简单，只要把 C 换成官方提供的同样用于控制 Fan_HAT 的 Python 程序后硬重启即可，当然别忘了把 local.rc 下的开机自启执行 C 程序指令也换成 Python 的。</p><p><img src="./2.png" alt=""></p><p>完结撒花~</p>]]></content>
    
    
    
    <tags>
      
      <tag>文章</tag>
      
      <tag>树莓派</tag>
      
      <tag>折腾</tag>
      
      <tag>微雪拓展板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu on Raspberry Pi4 type-c 一线连接 iPad 解决方案</title>
    <link href="/2022/10/22/1-wire-solution/"/>
    <url>/2022/10/22/1-wire-solution/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-on-Raspberry-Pi4-type-c-一线连接-iPad-解决方案"><a href="#Ubuntu-on-Raspberry-Pi4-type-c-一线连接-iPad-解决方案" class="headerlink" title="Ubuntu on Raspberry Pi4 type-c 一线连接 iPad 解决方案"></a>Ubuntu on Raspberry Pi4 type-c 一线连接 iPad 解决方案</h1><blockquote><p>其实在很早就有人发现可以让树莓派4通过一条 type-c 线将 iPad 和树莓派置于同一局域网下了，如果没记错的话大概是 <a href="https://www.hardill.me.uk/wordpress/2019/11/02/pi4-usb-c-gadget/">这篇文章</a>，也有人基于这篇文章做了个 <a href="https://youtu.be/A3qn1nqw-Gw/">视频</a>。</p><p>国内也有人制作了 <a href="https://github.com/TANG617/RaspberryPi-One-Wire">一键式 .sh 脚本</a> 和 <a href="https://www.bilibili.com/video/BV1Au41197TT?share_source=copy_web&amp;vd_source=3dfe10e0ea7d375042c58f23282c5c53">视频</a>。</p></blockquote><p><strong>但这些都是针对树莓派官方提供的系统的解决方案，那么有没有一种针对 Ubuntu 的 type-c 一线连解决方案呢？</strong></p><span id="more"></span><h2 id="刷入镜像"><a href="#刷入镜像" class="headerlink" title="刷入镜像"></a>刷入镜像</h2><p>其实也是有的，在 <a href="https://github.com/techcraftco/rpi-usb-gadget">这个仓库</a> 中其实已经有人帮我们做了一个配置好 type-c otg 的树莓派 Ubuntu Server 镜像，只需要进入该仓库的 <a href="https://github.com/techcraftco/rpi-usb-gadget/releases">Release</a> 页面即可获取，接下来只需要走一遍已经刻入 DNA 里的刷入树莓派镜像流程即可，不过需要注意的是，如果对 linux 不是很熟悉，可以先在官方提供的工具中先把 Wi-Fi 连上，省的还要在终端里自己写配置文件。</p><p><img src="./20221021_174911_image.png" alt=""></p><p>安装完后通过你能想到的任何方式（ssh, HDMI, etc.）进入终端，开始桌面环境的安装（如果你习惯不装桌面，那你已经可以靠自己解决接下来的所有问题了。）</p><hr><h2 id="桌面环境安装"><a href="#桌面环境安装" class="headerlink" title="桌面环境安装"></a>桌面环境安装</h2><p>首先换源，用你想用的编辑器打开或者直接用 linux 文件编辑指令都可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>这里我用的是中科大源，直接把所有的地址改成中科大的即可，没什么难度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://mirrors.ustc.edu.cn/ubuntu-ports/<br></code></pre></td></tr></table></figure><p>然后是每个 linux 开箱后的传统两部曲</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt upgrade<br></code></pre></td></tr></table></figure><p>然后装个你想用的 display manager，这里我装的是 lightdm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install lightdm<br></code></pre></td></tr></table></figure><p>输入以下指令，然后去泡杯茶吧等着吧（</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install ubuntu-desktop<br></code></pre></td></tr></table></figure><p>但是如果就这样重启后进入桌面，会惊讶地发现 Wi-Fi 不可用，其实这很正常，因为我们装的是 Ubuntu Server，网络会默认由 netplan 控制。所以我们需要在重启之前，用任意你喜欢的文本编辑器打开 <code>/etc/netplan/50-cloud-init.yaml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/netplan/50-cloud-init.yaml<br></code></pre></td></tr></table></figure><p>这里面存储的就是你在刷入镜像时在设置界面填写的你的 Wi-Fi SSID 和密码，我们只需要吧这些全部注释掉后重启系统即可在桌面中随意切换 Wi-Fi 啦~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># This file is generated from information provided by the datasource.  Changes</span><br><span class="hljs-comment"># to it will not persist across an instance reboot.  To disable cloud-init&#x27;s</span><br><span class="hljs-comment"># network configuration capabilities, write a file</span><br><span class="hljs-comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span><br><span class="hljs-comment"># network: &#123;config: disabled&#125;</span><br><span class="hljs-comment">#network:</span><br><span class="hljs-comment">#    version: 2</span><br><span class="hljs-comment">#    wifis:</span><br><span class="hljs-comment">#        renderer: networkd</span><br><span class="hljs-comment">#        wlan0:</span><br><span class="hljs-comment">#            access-points:</span><br><span class="hljs-comment">#                这里是Wi-Fi的SSID:</span><br><span class="hljs-comment">#                    password: 这里是Wi-Fi的密码</span><br><span class="hljs-comment">#            dhcp4: true</span><br><span class="hljs-comment">#            optional: true</span><br></code></pre></td></tr></table></figure><p>然后，只需要执行 <code>sudo reboot</code> 重启系统即可进入桌面啦~</p><p>至此，只使用 HDMI 的 Ubuntu 桌面配置到此结束了，但这可是 type-c 一线连的教程，我们的目标是能够实现 iPad 通过 VNC 连接至树莓派桌面，所以请继续往下阅读 VNC 方案</p><hr><h2 id="VNC-Server-安装"><a href="#VNC-Server-安装" class="headerlink" title="VNC Server 安装"></a>VNC Server 安装</h2><p>在安装 VNC Server 之前，首先需要更改一下树莓派的配置文件，打开如下文件，当然你也可以用读卡器在其他系统下直接更改sd卡下的 config.txt 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /boot/firmware/config.txt<br></code></pre></td></tr></table></figure><p>在文件的最末添加如下三行即可，其中 <code>framebuffer_width</code> 和 <code>framebuffer_height</code> 可以更改为你想要的分辨率来适配各种设备，<code>hdmi_force_hotplug</code> 让树莓派可以实现 HDMI 热插拔，只有打开才能实现我们想要的 headless。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hdmi_force_hotplug=1<br>framebuffer_width=1920<br>framebuffer_height=1080<br></code></pre></td></tr></table></figure><p>更改完毕后开始进行 VNC Server 的安装，这里我选用的是 RealVNC 的方案，你可以到官网下到树莓派 arm64 的 .deb，或者也可以到树莓派镜像源获取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># RealVNC 官网源</span><br>wget https://downloads.realvnc.com/download/file/vnc.files/vnc-Server-6.11.0-Linux-ARM64.deb<br><span class="hljs-comment"># 树莓派镜像源</span><br>wget https://archive.raspberrypi.org/debian/pool/main/r/realvnc-vnc/realvnc-vnc-viewer_6.22.515.47347_arm64.deb<br></code></pre></td></tr></table></figure><p>下好后直接 <code>dpkg -i</code> 安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dpkg -i 文件名.deb<br></code></pre></td></tr></table></figure><p>接着，我们 cd 到 /usr/lib/aarch64-linux-gnu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/lib/aarch64-linux-gnu<br></code></pre></td></tr></table></figure><p>执行如下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> libvcos.so /usr/lib/libvcos.so.0<br>sudo <span class="hljs-built_in">ln</span> libvchiq_arm.so /usr/lib/libvchiq_arm.so.0<br>sudo <span class="hljs-built_in">ln</span> libbcm_host.so /usr/lib/libbcm_host.so.0<br>sudo <span class="hljs-built_in">ln</span> libmmal.so /usr/lib/libmmal.so.0<br>sudo <span class="hljs-built_in">ln</span> libmmal_core.so /usr/lib/libmmal_core.so.0<br>sudo <span class="hljs-built_in">ln</span> libmmal_components.so /usr/lib/libmmal_components.so.0<br>sudo <span class="hljs-built_in">ln</span> libmmal_util.so /usr/lib/libmmal_util.so.0<br>sudo <span class="hljs-built_in">ln</span> libmmal_vc_client.so /usr/lib/libmmal_vc_client.so.0<br>sudo <span class="hljs-built_in">ln</span> libvcsm.so /usr/lib/libvcsm.so.0<br>sudo <span class="hljs-built_in">ln</span> libcontainers.so /usr/lib/libcontainers.so.0<br></code></pre></td></tr></table></figure><p>最后，启用并启动一下 VNC Server 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> vncserver-virtuald.service<br>sudo systemctl <span class="hljs-built_in">enable</span> vncserver-x11-serviced.service<br>sudo systemctl start vncserver-virtuald.service<br>sudo systemctl start vncserver-x11-serviced.service<br></code></pre></td></tr></table></figure><p>重启系统即可通过 VNC 连接至树莓派啦，让我们分别试试通过 Wi-Fi 的 VNC 远程连接和直接使用 type-c 一线连后通过 iPad VNC 连接至树莓派</p><p><img src="./20221022_010600_image.png" alt="" title="通过 Wi-Fi 的 VNC 远程连接"></p><p>需要注意的一点是 iPad 通过 type-c 连接上树莓派后会在设置中多出来一个 “以太网” 选项，如果点进去后能看到 IP 地址则说明配置成功，只需要在任意 VNC 客户端中输入地址 <code>10.55.0.1</code> 即可连接，如果没有看到 “以太网” 选项，那你应该重新阅读此文，检查是否有什么地方有所疏漏（或者本篇文章有什么地方有所疏漏）。若果你已经看到以太网选项但是一段时间后该选项自动消失了，那你应该试试用上面的指令重新启用 VNC Server 服务，重启然后重新连接 iPad。</p><p><img src="./20221022_013419_image.png" alt="" title="iPad 以太网选项"><br><img src="./20221022_013717_image.png" alt="" title="type-c 一线连"></p>]]></content>
    
    
    
    <tags>
      
      <tag>文章</tag>
      
      <tag>树莓派</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迁移至github Pages</title>
    <link href="/2022/09/10/MigratetoGithubPages/"/>
    <url>/2022/09/10/MigratetoGithubPages/</url>
    
    <content type="html"><![CDATA[<h1 id="什么？你问我旧文章去哪了？"><a href="#什么？你问我旧文章去哪了？" class="headerlink" title="什么？你问我旧文章去哪了？"></a>什么？你问我旧文章去哪了？</h1><p>别问，问就是丢了，或许有空会拿回来顺带更新一下，但至少不是现在。</p><h1 id="接下来这个博客会写什么？"><a href="#接下来这个博客会写什么？" class="headerlink" title="接下来这个博客会写什么？"></a>接下来这个博客会写什么？</h1><p>什么都写，包括自己最近 <a href="https://github.com/gaogao-qwq/Data_Structure">在学的东西</a> 和 <a href="https://github.com/gaogao-qwq/Z-Turn">在折腾的东西</a>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
